{
    "name": "glareremoval", // experiments name
    "gpu_ids": [0], // gpu ids list, default is single 0
    "seed" : -1, // random seed, seed <0 represents randomization not used 
    "finetune_norm": false, // find the parameters to optimize

    "path": { //set every part file path
        "base_dir": "experiments", // base path for all log except resume_state
        "code": "code", // code backup
        "tb_logger": "tb_logger", // path of tensorboard logger
        "results": "results",
        "checkpoint": "checkpoint",
        // "resume_state": "experiments/inpainting_places2_220413_143231/checkpoint/25" 
        "resume_state": null // ex: 100, loading .state  and .pth from given epoch and iteration
    },

    "datasets": { // train or test
        "train": { 
            "which_dataset": {  // import designated dataset using arguments 
                "name": ["data.presynth_flare7k_dataset", "Flare_Image_Loader_Presynth"], // import Dataset() class / function(not recommend) from data.dataset.py (default is [data.dataset.py])
                "args":{ 
                    "image_path": "datasets/presynth_flare7k_64",
                    "mask_type": "luminance",
                    "mask_high_on_lsource": false,
                    "mask_gamma": 10.0 // higher == mask out more of lightsource
                } 
            },
            "dataloader":{
                "unlimited_data": false, // if true, will not split
                "validation_split": 64, // percent or number. def 2  -> overrided by debug_split in debug mode
                "args":{ // arguments to initialize train_dataloader
                    "batch_size": 64, // batch size in each gpu
                    "num_workers": 4,
                    "shuffle": true,
                    "pin_memory": true,
                    "drop_last": true
                },
                "val_args":{ // arguments to initialize valid_dataloader, will overwrite the parameters in train_dataloader
                    "batch_size": 64, // batch size in each gpu. def 1
                    "num_workers": 4,
                    "shuffle": false,
                    "pin_memory": true,
                    "drop_last": false
                }
            }
        },
        "test": { 
            "which_dataset": {
                "name": ["data.flare7k_dataset", "Flare_Pair_Loader"], // import Dataset() class / function(not recommend) from default file
                "args":{ // TODO: differentiate test/train set somehow - perhaps by using an image folder here
                    "opt":{ // TODO: <-- expand "opt"
                        "bg_path":          "datasets/Flickr24K/raw",
                        "flare_path":       "datasets/flare/Flare",
                        "lsource_path":     "datasets/flare/Annotations/Light_Source",
                        "transform_base":   {"img_size": 64, "pre_crop_size": 64},
                        "transform_flare":  {
                                                "scale_min": 0.05,   // default 0.8
                                                "scale_max": 0.2,   // default 1.5
                                                "shear": 20         // chooses a random angle (deg) between -shear and +shear
                                            },
                        "mask_type":        "luminance",
                        "mask_high_on_lsource": false,
                        "placement_mode":   "random"                // "light_pos", "random", or "centre"
                    }
                }
            },
            "dataloader":{
                "args":{
                    "batch_size": 64,
                    "num_workers": 4,
                    "pin_memory": true
                }
            }
        }
    },

    "model": { // networks/metrics/losses/optimizers/lr_schedulers is a list and model is a dict
        "which_model": { // import designated  model(trainer) using arguments 
            "name": ["models.model", "Palette"], // import Model() class / function(not recommend) from models.model.py (default is [models.model.py])
            "args": {
                "sample_num": 8, // process of each image
                "task": "deglaring",
                "ema_scheduler": {
                    "ema_start": 1,
                    "ema_iter": 1,
                    "ema_decay": 0.9999
                },
                "optimizers": [
                    { "lr": 0.003122, "weight_decay": 0.00001}
                ],
                "mask_on_metrics": true,
                "quiet": true
            }
        },
        "which_networks": [ // import designated list of networks using arguments
            {
                "name": ["models.network", "Network"], // import Network() class / function(not recommend) from default file (default is [models/network.py]) 
                "args": { // arguments to initialize network
                    "init_type": "kaiming", // method can be [normal | xavier| xavier_uniform | kaiming | orthogonal], default is kaiming
                    "module_name": "guided_diffusion", // sr3 | guided_diffusion
                    "unet": {
                        "in_channel": 6,
                        "out_channel": 3,
                        "inner_channel": 32,
                        "channel_mults": [
                            1,
                            2,
                            4,
                            8
                        ],
                        "attn_res": [
                            // 32,
                            16
                            // 8
                        ],
                        "num_head_channels": 32,
                        "res_blocks": 1,
                        "dropout": 0.2,
                        "image_size": 224,
                        "groupnorm": false
                    },
                    "beta_schedule": {
                        "train": {
                            "schedule": "linear",
                            "n_timestep": 2000,
                            // "n_timestep": 5, // debug
                            "linear_start": 1e-6,
                            "linear_end": 0.01
                        },
                        "test": {
                            "schedule": "linear",
                            "n_timestep": 1000,
                            "linear_start": 1e-4,
                            "linear_end": 0.09
                        }
                    },
                    "mask_for_loss_only": true
                }
            }
        ],
        "which_losses": [ // import designated list of losses without arguments
            "mse_loss" // import mse_loss() function/class from default file (default is [models/losses.py]), equivalent to { "name": "mse_loss", "args":{}}
        ],
        "which_metrics": [ // import designated list of metrics without arguments
            "mae" // import mae() function/class from default file (default is [models/metrics.py]), equivalent to { "name": "mae", "args":{}}
        ]
    },

    "train": { // arguments for basic training
        "n_epoch": 1e8, // max epochs, not limited now
        "n_iter": 1e8, // max interations
        "val_epoch": 5, // valdation every specified number of epochs. def 5
        "save_checkpoint_epoch": 5, // def 10
        "log_iter": 64, // log every specified number of iterations. def 1e4
        "tensorboard" : true // tensorboardX enable
    },
    
    "debug": { // arguments in debug mode, which will replace arguments in train
        "val_epoch": 1,
        "save_checkpoint_epoch": 1,
        "log_iter": 5,
        "debug_split": 400
         // percent or number, change the size of dataloder to debug_split.
    }
}
